<?php

/**
 * @file
 * Install, update and uninstall functions for the ai_translate module.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Url;

/**
 * Implements hook_install().
 */
function ai_translate_hook_install($is_syncing) {
  _ai_translate_check_default_provider_and_model();
}

/**
 * Implements hook_requirements().
 */
function ai_translate_requirements($phase) {
  $requirements = [];
  if ($phase === 'runtime') {
    $sets = \Drupal::service('ai.provider')->getDefaultProviderForOperationType('chat');
    if (empty($sets['provider_id'])) {
      $requirements['ai_translate'] = [
        'title' => t('AI Default Chat Provider'),
        'value' => t('Please provide a default Chat AI provider'),
        'description' => t('The AI_translate needs a default chat ai to be configured in the  <a href=":url">AI module settings</a>. Please configure a default Chat AI system.', [':url' => Url::fromRoute('ai.settings_form')->toString()]),
        'severity' => REQUIREMENT_ERROR,
      ];
    }
  }
  return $requirements;
}

/**
 * Install default prompt for existing installations.
 */
function ai_translate_update_10001(&$sandbox) {
  /** @var \Drupal\Core\Config\ConfigFactory $configFactory */
  $configFactory = \Drupal::service('config.factory');
  if ($configFactory->get('ai_translate.settings')->get('prompt')) {
    // Prompt already exists, do nothing.
    return;
  }
  $configPath = \Drupal::service('extension.path.resolver')
    ->getPath('module', 'ai_translate') . '/config/install';
  $source = new FileStorage($configPath);
  $configFactory->getEditable('ai_translate.settings')
    ->setData($source->read('ai_translate.settings'))
    ->save();
}
