<?php

/**
 * @file
 * The AI translate module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\ai_translate\ConfigurableFieldTextExtractorInterface;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function ai_translate_form_field_config_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $fieldConfig = $form_state->getFormObject()->getEntity();
  /** @var \Drupal\ai_translate\FieldTextExtractorPluginManager $pluginManager */
  $pluginManager = \Drupal::service('plugin.manager.text_extractor');
  $fieldType = $fieldConfig->getType();
  foreach ($pluginManager->getDefinitions() as $pluginId => $definition) {
    if (!in_array($fieldType, $definition['field_types'])) {
      continue;
    }
    /** @var \Drupal\ai_translate\ConfigurableFieldTextExtractorInterface $plugin */
    $plugin = $pluginManager->createInstance($pluginId);
    if (!$plugin instanceof ConfigurableFieldTextExtractorInterface) {
      continue;
    }
    $subform = $plugin->fieldSettingsForm($fieldConfig, $form_state, $form);
    if (!$subform) {
      continue;
    }
    // Only create the fieldset if there is at least one plugin form.
    if (empty($form['third_party_settings']['ai_translate'])) {
      $form['third_party_settings']['ai_translate'] = [
        '#type' => 'fieldset',
        '#title' => t('AI Translate'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      ];
    }
    $form['third_party_settings']['ai_translate'][$pluginId] = $subform;
    $form['#entity_builders'][] = 'ai_translate_config_entity_builder';
  }
}

/**
 * Field config entity builder.
 *
 * Injects settings of configurable text extractors.
 *
 * @see \Drupal\Core\Entity\EntityForm::buildEntity()
 */
function ai_translate_config_entity_builder(
  string $entityTypeId,
  $entity,
  &$form,
  FormStateInterface &$form_state,
) {
  if (!$form_state->isSubmitted()) {
    return;
  }
  $thirdPartySettings = $form_state->getValue(['third_party_settings', 'ai_translate']);
  if (!$thirdPartySettings) {
    return;
  }
  $pluginManager = \Drupal::service('plugin.manager.text_extractor');
  foreach ($thirdPartySettings as $pluginId => $values) {
    try {
      /** @var \Drupal\ai_translate\ConfigurableFieldTextExtractorInterface $plugin */
      $plugin = $pluginManager->createInstance($pluginId);
      $plugin->submitFieldSettingForm($entity, $form_state, $form);
    }
    catch (\Throwable $exception) {
      \Drupal::logger('ai_translate')->error($exception->getMessage());
      \Drupal::messenger()->addWarning(t('An error has occurred. Please try again later.'));
    }
  }
}

/**
 * Implements hook_help() for module help info.
 */
function ai_translate_plugin_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.ai':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module will integrate AI with our Drupal system. It will add a Translate link to translate an entire piece of content into another language in one click.');
      $output .= ' ' . t('For more information, see the <a href=":drupal-org-help">online documentation for the ai_translate module</a>.', [':drupal-org-help' => 'https://www.drupal.org/project/ai']);
      $output .= '</p>';
      return $output;
  }
}

/**
 * Check if default provider is chosen and model is selected.
 */
function _ai_translate_check_default_provider_and_model() {
  $sets = \Drupal::service('ai.provider')->getDefaultProviderForOperationType('chat');
  if (empty($sets['provider_id'])) {
    \Drupal::messenger()->addMessage(t('Please set a default chat provider & model in the <a href=":url">AI module settings</a>.', [':url' => Url::fromRoute('ai.settings_form')->toString()]), 'error', FALSE);
  }
}
