<?php

/**
 * @file
 * AI module file.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_modules_installed().
 */
function ai_modules_installed(array $modules) {
  // Clear the provider cache when a module is installed.
  \Drupal::cache('discovery')->delete('ai_provider_plugins');
}

/**
 * Helper function to check if the current route is an admin route.
 *
 * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
 *   The route match interface.
 *
 * @return bool
 *   TRUE if the route is an admin route, FALSE otherwise.
 */
function ai_is_admin_route(RouteMatchInterface $route_match) {
  $route = $route_match->getRouteObject();
  if ($route && $route->hasOption('_admin_route') && $route->getOption('_admin_route') == TRUE) {
    return TRUE;
  }

  // Check if the route path starts with '/admin'.
  $path = $route_match->getRouteObject()->getPath();
  if (strpos($path, '/admin') === 0) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_module_preuninstall().
 */
function ai_module_preuninstall($module) {
  $providers = _ai_providers_mapping();

  // Check if the module is one of the old submodules.
  if (array_key_exists($module, $providers)) {
    $submodule = $module;
    $external_module = $providers[$module];

    // External module is already installed as expected. No action needed, so
    // we can bail out.
    /** @var \Drupal\Core\Extension\ModuleHandlerInterface $handler */
    $handler = \Drupal::service('module_handler');
    if ($handler->moduleExists($external_module)) {
      return;
    }

    // External module exists but is not enabled, enable it. This will trigger
    // the hook install if that module so it copies over the configuration
    // before the submodule that is being uninstalled completes its uninstall.
    /** @var \Drupal\Core\Extension\ModuleExtensionList $list */
    $list = \Drupal::service('extension.list.module');
    if ($list->exists($external_module)) {
      /** @var \Drupal\Core\Extension\ModuleInstallerInterface $installer */
      $installer = \Drupal::service('module_installer');
      $installer->install([$external_module]);
      return;
    }

    // Check if there is configuration for the submodule.
    $config_factory = \Drupal::configFactory();
    $settings = $config_factory->get($submodule . '.settings');
    if (!empty($settings->get('api_key'))) {

      // Determine the path to configure the submodule.
      if (str_starts_with($submodule, 'vdb_')) {
        $path = 'admin/config/ai/vdb_providers/' . str_replace('vdb_provider_', '', $submodule);
      }
      else {
        $path = 'admin/config/ai/providers/' . str_replace('provider_', '', $submodule);
      }

      // Let the user make a conscious choice:
      // - Remove the key from the provider settings to allow uninstall.
      // - Ensure that the replacement external module is enabled first.
      // This ensures we prevent accidental loss of the configuration.
      $message = t("You are attempting to uninstall '@submodule' yet the replacement '@external_module' has not yet been installed. If you intentionally want to uninstall this module without having the replacement in place, unset the the API Key at '@path'. You can find the new module under @link or download it by running `composer require drupal/@external_module`.", [
        '@submodule' => $submodule,
        '@external_module' => $external_module,
        '@link' => 'https://www.drupal.org/project/' . $external_module,
        '@path' => $path,
      ]);
      die((string) $message);
    }
  }
}

/**
 * Mapping from the provider submodules to the new external modules.
 *
 * @return string[]
 *   The submodule providers mapped to the external module providers.
 *
 * @internal
 */
function _ai_providers_mapping(): array {
  // @todo verify the destination ai providers are correct.
  return [
    'provider_anthropic' => 'ai_provider_anthropic',
    'provider_groq' => 'ai_provider_groq',
    'provider_huggingface' => 'ai_provider_huggingface',
    'provider_lmstudio' => 'ai_provider_lmstudio',
    'provider_mistral' => 'ai_provider_mistral',
    'provider_ollama' => 'ai_provider_ollama',
    'provider_openai' => 'ai_provider_openai',
    'vdb_provider_pinecone' => 'ai_vdb_provider_pinecone',
    'vdb_provider_milvus' => 'ai_vdb_provider_milvus',
  ];
}
