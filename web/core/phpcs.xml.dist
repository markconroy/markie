<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="drupal_core">
  <arg name="extensions" value="engine,inc,install,module,php,profile,test,theme,yml"/>
  <description>Default PHP CodeSniffer configuration for Drupal core.</description>

  <!--Exclude folders used by common frontend tools. These folders match the file_scan_ignore_directories setting in default.settings.php-->
  <exclude-pattern>*/bower_components/*</exclude-pattern>
  <exclude-pattern>*/node_modules/*</exclude-pattern>
  <!--Exclude third party code.-->
  <exclude-pattern>./assets/vendor/*</exclude-pattern>
  <!--Exclude the PHPStan baseline and temp dir from coding standards.-->
  <exclude-pattern>./core/.phpstan-baseline.php</exclude-pattern>
  <!-- Exclude third-party code maintained within core that does not follow our standards. -->
  <!-- @todo This rule may be removed when https://www.drupal.org/node/1848264 is resolved. -->
  <exclude-pattern>./core/lib/Drupal/Component/Diff/</exclude-pattern>
  <exclude-pattern>./core/phpstan-tmp/*</exclude-pattern>
  <exclude-pattern>./core/tests/Drupal/Tests/Component/Annotation/Doctrine/</exclude-pattern>

  <!--Exclude test files that are intentionally empty, or intentionally violate coding standards.-->
  <exclude-pattern>./modules/system/tests/fixtures/HtaccessTest</exclude-pattern>

  <file>.</file>
  <file>../composer</file>
  <file>scripts/password-hash.sh</file>
  <file>scripts/rebuild_token_calculator.sh</file>
  <file>scripts/run-tests.sh</file>
  <file>scripts/update-countries.sh</file>

  <!-- Only include specific sniffs that pass. This ensures that, if new sniffs are added, HEAD does not fail.-->

  <!-- Drupal sniffs -->
  <rule ref="Drupal.Arrays.Array"/>
  <rule ref="Drupal.Arrays.Array.LongLineDeclaration">
    <include-pattern>core/*/Unit/*</include-pattern>
    <include-pattern>core/*/FunctionalJavascript/*</include-pattern>
    <include-pattern>core/*/Kernel/*</include-pattern>
    <include-pattern>core/lib/*</include-pattern>
    <include-pattern>core/modules/*/tests/modules/*</include-pattern>
  </rule>
  <rule ref="Drupal.Classes.ClassCreateInstance"/>
  <rule ref="Drupal.Classes.ClassDeclaration"/>
  <rule ref="Drupal.Classes.ClassFileName"/>
  <rule ref="Drupal.Classes.FullyQualifiedNamespace"/>
  <rule ref="Drupal.Classes.InterfaceName"/>
  <rule ref="Drupal.Classes.PropertyDeclaration"/>
  <rule ref="Drupal.Classes.UnusedUseStatement"/>
  <rule ref="Drupal.Classes.UseGlobalClass"/>
  <rule ref="Drupal.Classes.UseLeadingBackslash"/>
  <rule ref="Drupal.Commenting.ClassComment"/>
  <rule ref="Drupal.Commenting.DataTypeNamespace"/>
  <rule ref="Drupal.Commenting.Deprecated"/>
  <rule ref="Drupal.Commenting.DocComment">
    <!-- Sniff for these errors: SpacingAfterTagGroup, WrongEnd, SpacingBetween,
      ContentAfterOpen, SpacingBeforeShort, TagValueIndent, ShortStartSpace,
      SpacingAfter, LongNotCapital, ShortFullStop, TagGroupSpacing, Empty,
      TagsNotGrouped, ParamGroup -->
    <exclude name="Drupal.Commenting.DocComment.LongFullStop"/>
  </rule>
  <rule  ref="Drupal.Commenting.DocComment.MissingShort">
    <include-pattern>core/*/Unit/*</include-pattern>
  </rule>
  <rule ref="Drupal.Commenting.DocCommentAlignment"/>
  <rule ref="Drupal.Commenting.DocCommentLongArraySyntax"/>
  <rule ref="Drupal.Commenting.DocCommentStar"/>
  <rule ref="Drupal.Commenting.FileComment"/>
  <rule ref="Drupal.Commenting.FunctionComment"/>
  <rule ref="Drupal.Commenting.FunctionComment.Missing">
    <include-pattern>core/*/src/Plugin/*</include-pattern>
    <include-pattern>*/Database/*</include-pattern>
    <include-pattern>*/FunctionalJavascript/*</include-pattern>
    <include-pattern>*/Kernel/*</include-pattern>
    <include-pattern>*/KernelTests/*</include-pattern>
    <include-pattern>*/Functional/*</include-pattern>
    <include-pattern>*/Unit/*</include-pattern>
  </rule>
  <rule ref="Drupal.Commenting.FunctionComment.MissingParamType"/>
  <rule ref="Drupal.Commenting.FunctionComment.MissingReturnComment"/>
  <rule ref="Drupal.Commenting.GenderNeutralComment"/>
  <rule ref="Drupal.Commenting.HookComment"/>
  <rule ref="Drupal.Commenting.InlineComment">
    <!-- Sniff for: NoSpaceBefore, SpacingBefore, WrongStyle -->
    <exclude name="Drupal.Commenting.InlineComment.InvalidEndChar"/>
    <exclude name="Drupal.Commenting.InlineComment.SpacingAfter"/>
  </rule>
  <rule ref="Drupal.Commenting.InlineVariableComment"/>
  <rule ref="Drupal.Commenting.PostStatementComment"/>
  <rule ref="Drupal.Commenting.TodoComment" />
  <rule ref="Drupal.Commenting.VariableComment"/>
  <rule ref="Drupal.ControlStructures.ControlSignature"/>
  <rule ref="Drupal.ControlStructures.ElseIf"/>
  <rule ref="Drupal.ControlStructures.InlineControlStructure"/>
  <rule ref="Drupal.Files.EndFileNewline"/>
  <rule ref="Drupal.Files.FileEncoding"/>
  <rule ref="Drupal.Files.LineLength">
    <include-pattern>*/core/lib/*</include-pattern>
    <exclude-pattern>*/core/lib/*/*Trait</exclude-pattern>
    <include-pattern>*/core/includes/*</include-pattern>
    <include-pattern>*/core/profiles/*</include-pattern>
    <include-pattern>*/core/recipes/*</include-pattern>
    <include-pattern>*/core/themes/*</include-pattern>
    <include-pattern>*/core/modules/*</include-pattern>
    <exclude-pattern>*/core/modules/*/tests</exclude-pattern>
  </rule>
  <rule ref="Drupal.Files.TxtFileLineLength"/>
  <rule ref="Drupal.Formatting.MultiLineAssignment"/>
  <rule ref="Drupal.Formatting.MultipleStatementAlignment"/>
  <rule ref="Drupal.Formatting.SpaceInlineIf"/>
  <rule ref="Drupal.Formatting.SpaceUnaryOperator"/>
  <rule ref="Drupal.Functions.DiscouragedFunctions"/>
  <rule ref="Drupal.Functions.FunctionDeclaration"/>
  <rule ref="Drupal.Functions.MultiLineFunctionDeclaration"/>
  <rule ref="Drupal.InfoFiles.AutoAddedKeys"/>
  <rule ref="Drupal.InfoFiles.ClassFiles"/>
  <rule ref="Drupal.InfoFiles.DuplicateEntry"/>
  <rule ref="Drupal.InfoFiles.Required"/>
  <rule ref="Drupal.Methods.MethodDeclaration">
    <!-- Silence method name underscore warning which is covered already in
      Drupal.NamingConventions.ValidFunctionName.ScopeNotCamelCaps. -->
    <exclude name="Drupal.Methods.MethodDeclaration.Underscore"/>
  </rule>
  <rule ref="Drupal.NamingConventions.ValidClassName"/>
  <rule ref="Drupal.NamingConventions.ValidGlobal"/>
  <rule ref="Drupal.NamingConventions.ValidVariableName"/>
  <rule ref="Drupal.NamingConventions.ValidVariableName.LowerCamelName"/>
  <rule ref="Drupal.Scope.MethodScope"/>
  <rule ref="Drupal.Semantics.ConstantName.ConstantStart"/>
  <rule ref="Drupal.Semantics.EmptyInstall"/>
  <rule ref="Drupal.Semantics.FunctionAlias"/>
  <rule ref="Drupal.Semantics.FunctionT"/>
  <rule ref="Drupal.Semantics.FunctionTriggerError"/>
  <rule ref="Drupal.Semantics.FunctionWatchdog"/>
  <rule ref="Drupal.Semantics.InstallHooks"/>
  <rule ref="Drupal.Semantics.LStringTranslatable"/>
  <rule ref="Drupal.Semantics.PregSecurity"/>
  <rule ref="Drupal.Semantics.RemoteAddress"/>
  <rule ref="Drupal.Semantics.TInHookMenu"/>
  <rule ref="Drupal.Semantics.TInHookSchema"/>
  <rule ref="Drupal.WhiteSpace.CloseBracketSpacing"/>
  <rule ref="Drupal.WhiteSpace.Comma"/>
  <rule ref="Drupal.WhiteSpace.EmptyLines"/>
  <rule ref="Drupal.WhiteSpace.Namespace"/>
  <rule ref="Drupal.WhiteSpace.ObjectOperatorIndent"/>
  <rule ref="Drupal.WhiteSpace.ObjectOperatorSpacing"/>
  <rule ref="Drupal.WhiteSpace.OpenBracketSpacing"/>
  <rule ref="Drupal.WhiteSpace.OpenTagNewline"/>
  <rule ref="Drupal.WhiteSpace.ScopeClosingBrace"/>
  <rule ref="Drupal.WhiteSpace.ScopeIndent"/>

  <!-- Drupal Practice sniffs -->
  <rule ref="DrupalPractice.CodeAnalysis.VariableAnalysis">
    <!-- Do not run this sniff on API files or transliteration data. -->
    <exclude-pattern>*.api.php</exclude-pattern>
    <exclude-pattern>core/lib/Drupal/Component/Transliteration/data/*.php</exclude-pattern>
    <properties>
      <property name="allowUnusedFunctionParameters" value="true"/>
    </properties>
  </rule>
  <rule ref="DrupalPractice.CodeAnalysis.VariableAnalysis.UndefinedUnsetVariable">
    <severity>0</severity>
  </rule>
  <rule ref="DrupalPractice.CodeAnalysis.VariableAnalysis.UndefinedVariable">
    <!-- Setting severity to 0 to completely disable an error message in this sniff, without excluding the whole sniff -->
    <!-- See https://github.com/squizlabs/PHP_CodeSniffer/wiki/Configuration-Options#changing-the-default-severity-levels -->
    <severity>0</severity>
  </rule>
  <rule ref="DrupalPractice.Commenting.ExpectedException"/>
  <rule ref="DrupalPractice.General.ExceptionT"/>
  <rule ref="DrupalPractice.InfoFiles.NamespacedDependency"/>
  <rule ref="DrupalPractice.Objects.GlobalFunction"/>

  <!-- Generic sniffs -->
  <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
  <rule ref="Generic.CodeAnalysis.EmptyPHPStatement"/>
  <rule ref="Generic.Files.ByteOrderMark"/>
  <rule ref="Generic.Files.LineEndings"/>
  <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
  <rule ref="Generic.Formatting.SpaceAfterCast"/>
  <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
  <rule ref="Generic.NamingConventions.ConstructorName"/>
  <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
  <rule ref="Generic.PHP.DeprecatedFunctions"/>
  <rule ref="Generic.PHP.DisallowShortOpenTag"/>
  <rule ref="Generic.PHP.LowerCaseKeyword"/>
  <rule ref="Generic.PHP.UpperCaseConstant"/>
  <rule ref="Generic.Strings.UnnecessaryStringConcat">
    <properties>
      <property name="allowMultiline" value="true"/>
    </properties>
  </rule>
  <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>
  <rule ref="Generic.WhiteSpace.LanguageConstructSpacing"/>

  <!-- Internal sniffs -->
  <rule ref="Internal.NoCodeFound">
    <!-- No PHP code in *.yml -->
    <exclude-pattern>*.yml</exclude-pattern>
  </rule>

  <!-- PEAR sniffs -->
  <rule ref="PEAR.Files.IncludingFile"/>
  <!-- Disable some error messages that we do not want. -->
  <rule ref="PEAR.Files.IncludingFile.UseInclude">
    <severity>0</severity>
  </rule>
  <rule ref="PEAR.Files.IncludingFile.UseIncludeOnce">
    <severity>0</severity>
  </rule>
  <rule ref="PEAR.Files.IncludingFile.UseRequire">
    <severity>0</severity>
  </rule>
  <rule ref="PEAR.Files.IncludingFile.UseRequireOnce">
    <severity>0</severity>
  </rule>
  <rule ref="PEAR.Functions.FunctionCallSignature"/>
  <!-- The sniffs inside PEAR.Functions.FunctionCallSignature silenced below are
    also silenced in Drupal CS' ruleset.xml. The code below is a 1-on-1 copy
    from that file. -->
  <rule ref="PEAR.Functions.FunctionCallSignature.CloseBracketLine">
    <severity>0</severity>
  </rule>
  <rule ref="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket">
    <severity>0</severity>
  </rule>
  <rule ref="PEAR.Functions.FunctionCallSignature.EmptyLine">
    <severity>0</severity>
  </rule>
  <!-- Disable some error messages that we do not want. -->
  <rule ref="PEAR.Functions.FunctionCallSignature.Indent">
    <severity>0</severity>
  </rule>
  <rule ref="PEAR.Functions.FunctionCallSignature.OpeningIndent">
    <severity>0</severity>
  </rule>
  <!-- Disable some error messages that we already cover. -->
  <rule ref="PEAR.Functions.FunctionCallSignature.SpaceAfterOpenBracket">
    <severity>0</severity>
  </rule>
  <rule ref="PEAR.Functions.FunctionCallSignature.SpaceBeforeCloseBracket">
    <severity>0</severity>
  </rule>
  <rule ref="PEAR.Functions.ValidDefaultValue"/>

  <!-- PSR-2 sniffs -->
  <rule ref="PSR2.Classes.PropertyDeclaration">
     <!-- Silence method name underscore warning which is covered already in
       Drupal.Classes.PropertyDeclaration. -->
    <exclude name="PSR2.Classes.PropertyDeclaration.Underscore"/>
  </rule>
  <rule ref="PSR2.Namespaces.NamespaceDeclaration"/>
  <rule ref="PSR2.Namespaces.UseDeclaration"/>

  <!-- SlevomatCodingStandard sniffs -->
  <rule ref="SlevomatCodingStandard.Classes.BackedEnumTypeSpacing"/>
  <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
    <properties>
      <property name="forbiddenAnnotations" type="array">
        <element value="@inheritDoc"/>
        <element value="@inheritdoc"/>
        <element value="@returns"/>
      </property>
    </properties>
  </rule>
  <rule ref="SlevomatCodingStandard.Commenting.ForbiddenComments">
    <properties>
       <property name="forbiddenCommentPatterns" type="array">
         <element value="/@inheritDoc/"/>
       </property>
    </properties>
  </rule>
  <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator"/>
  <rule ref="SlevomatCodingStandard.ControlStructures.RequireShortTernaryOperator"/>
  <rule ref="SlevomatCodingStandard.Exceptions.RequireNonCapturingCatch" />
  <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
    <properties>
      <property name="spacesCountAroundEqualsSign" value="0" />
    </properties>
    <include-pattern>*/tests/*</include-pattern>
    <exclude-pattern>*/fixtures/*</exclude-pattern>
  </rule>
  <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>

  <!-- Squiz sniffs -->
  <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
  <rule ref="Squiz.Arrays.ArrayDeclaration">
    <exclude name="Squiz.Arrays.ArrayDeclaration.KeySpecified"/>
    <exclude name="Squiz.Arrays.ArrayDeclaration.NoKeySpecified"/>
  </rule>
  <!-- Disable some error messages that we do not want. -->
  <rule ref="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.Arrays.ArrayDeclaration.FirstValueNoNewline">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.Arrays.ArrayDeclaration.KeyNotAligned">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.Arrays.ArrayDeclaration.NoComma">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.Arrays.ArrayDeclaration.NoCommaAfterLast">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.Arrays.ArrayDeclaration.NotLowerCase">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.Arrays.ArrayDeclaration.ValueNoNewline">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.Arrays.ArrayDeclaration.ValueNotAligned">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
  <!-- Disable some error messages that we already cover. -->
  <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration.AsNotLower">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration.SpaceAfterOpen">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration.SpaceBeforeClose">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
  <!-- Disable some error messages that we already cover. -->
  <rule ref="Squiz.ControlStructures.ForLoopDeclaration.SpacingAfterOpen">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.ControlStructures.ForLoopDeclaration.SpacingBeforeClose">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.ControlStructures.SwitchDeclaration"/>
  <!-- Disable some error messages that we do not want. -->
  <rule ref="Squiz.ControlStructures.SwitchDeclaration.BreakIndent">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.ControlStructures.SwitchDeclaration.CaseIndent">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.ControlStructures.SwitchDeclaration.CloseBraceAlign">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.ControlStructures.SwitchDeclaration.DefaultIndent">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.ControlStructures.SwitchDeclaration.DefaultNoBreak">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.ControlStructures.SwitchDeclaration.EmptyCase">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.ControlStructures.SwitchDeclaration.EmptyDefault">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.ControlStructures.SwitchDeclaration.MissingDefault">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.ControlStructures.SwitchDeclaration.SpacingAfterCase">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.ControlStructures.SwitchDeclaration.SpacingAfterDefaultBreak">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.ControlStructures.SwitchDeclaration.SpacingBeforeBreak">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
    <properties>
      <property name="equalsSpacing" value="1"/>
    </properties>
  </rule>
  <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing.NoSpaceBeforeArg">
    <severity>0</severity>
  </rule>
  <rule ref="Squiz.PHP.LowercasePHPFunctions"/>
  <rule ref="Squiz.PHP.NonExecutableCode"/>
  <rule ref="Squiz.Strings.ConcatenationSpacing">
    <properties>
      <property name="spacing" value="1"/>
      <property name="ignoreNewlines" value="true"/>
    </properties>
  </rule>
  <rule ref="Squiz.WhiteSpace.FunctionSpacing">
    <properties>
      <property name="spacing" value="1"/>
    </properties>
  </rule>
  <rule ref="Squiz.WhiteSpace.OperatorSpacing">
    <properties>
      <property name="ignoreNewlines" value="true"/>
    </properties>
  </rule>
  <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>
  <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>
  <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>

  <!-- Zend sniffs -->
  <rule ref="Zend.Files.ClosingTag"/>

</ruleset>
