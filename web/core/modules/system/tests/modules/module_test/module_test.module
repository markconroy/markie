<?php

/**
 * @file
 * Test module.
 */

declare(strict_types=1);

use Drupal\Core\Extension\Extension;

/**
 * Implements hook_system_info_alter().
 *
 * Manipulate module dependencies to test dependency chains.
 */
function module_test_system_info_alter(&$info, Extension $file, $type): void {
  if (\Drupal::state()->get('module_test.dependency') == 'missing dependency') {
    if ($file->getName() == 'dblog') {
      // Make dblog module depend on config.
      $info['dependencies'][] = 'config';
    }
    elseif ($file->getName() == 'config') {
      // Make config module depend on a non-existing module.
      $info['dependencies'][] = 'foo';
    }
  }
  elseif (\Drupal::state()->get('module_test.dependency') == 'dependency') {
    if ($file->getName() == 'dblog') {
      // Make dblog module depend on config.
      $info['dependencies'][] = 'config';
    }
    elseif ($file->getName() == 'config') {
      // Make config module depend on help module.
      $info['dependencies'][] = 'help';
    }
    elseif ($file->getName() == 'entity_test') {
      // Make entity test module depend on help module.
      $info['dependencies'][] = 'help';
    }
  }
  elseif (\Drupal::state()->get('module_test.dependency') == 'version dependency') {
    if ($file->getName() == 'dblog') {
      // Make dblog module depend on config.
      $info['dependencies'][] = 'config';
    }
    elseif ($file->getName() == 'config') {
      // Make config module depend on a specific version of help module.
      $info['dependencies'][] = 'help (1.x)';
    }
    elseif ($file->getName() == 'help') {
      // Set help module to a version compatible with the above.
      $info['version'] = '8.x-1.0';
    }
  }
  if ($file->getName() == 'stark' && $type == 'theme') {
    $info['regions']['test_region'] = 'Test region';
  }
}

/**
 * Implements hook_hook_info().
 */
function module_test_hook_info(): array {
  $hooks['test_hook'] = [
    'group' => 'file',
  ];
  return $hooks;
}

/**
 * Load function used by module_test_hook_dynamic_loading_invoke_all_during_load().
 *
 * @see module_test_menu()
 */
function module_test_load($param) {
  $result = \Drupal::moduleHandler()->invokeAll('test_hook');
  return $result[$param];
}

/**
 * Implements hook_modules_installed().
 */
function module_test_modules_installed($modules): void {
  // Record the ordered list of modules that were passed in to this hook so we
  // can check that the modules were enabled in the correct sequence.
  \Drupal::state()->set('module_test.install_order', $modules);
}

/**
 * Implements hook_modules_uninstalled().
 */
function module_test_modules_uninstalled($modules): void {
  // Record the ordered list of modules that were passed in to this hook so we
  // can check that the modules were uninstalled in the correct sequence.
  \Drupal::state()->set('module_test.uninstall_order', $modules);
}
