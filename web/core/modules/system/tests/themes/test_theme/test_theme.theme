<?php

/**
 * @file
 * Theme to help test the Twig engine.
 */

declare(strict_types=1);

/**
 * Implements THEME_preprocess_twig_theme_test_php_variables().
 */
function test_theme_preprocess_twig_theme_test_php_variables(&$variables): void {
  $variables['php_values'] = _test_theme_twig_php_values();
}

/**
 * Implements hook_element_info_alter().
 */
function test_theme_element_info_alter(&$info): void {
  // Decrease the default size of textfields.
  if (isset($info['textfield']['#size'])) {
    $info['textfield']['#size'] = 40;
  }
}

/**
 * Implements hook_library_info_alter().
 */
function test_theme_library_info_alter(&$libraries, $extension): void {
  if ($extension === 'test_theme') {
    $libraries['kitten']['js']['kittens.js'] = [];
  }
}

/**
 * Tests a theme implementing an alter hook.
 *
 * The confusing function name here is due to this being an implementation of
 * the alter hook invoked when the 'theme_test' module calls
 * \Drupal::moduleHandler->alter('theme_test_alter').
 */
function test_theme_theme_test_alter_alter(&$data): void {
  $data = 'test_theme_theme_test_alter_alter was invoked';
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function test_theme_theme_suggestions_alter(array &$suggestions, array &$variables, $hook): void {
  \Drupal::messenger()->addStatus(__FUNCTION__ . '() executed.');
  // Theme alter hooks run after module alter hooks, so add this theme
  // suggestion to the beginning of the array so that the suggestion added by
  // the theme_suggestions_test module can be picked up when that module is
  // enabled.
  if ($hook == 'theme_test_general_suggestions') {
    array_unshift($suggestions, 'theme_test_general_suggestions__theme_override');
    $variables['theme_hook'] = 'test_theme_theme_suggestions_alter';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function test_theme_theme_suggestions_theme_test_suggestions_alter(array &$suggestions, array $variables): void {
  \Drupal::messenger()->addStatus(__FUNCTION__ . '() executed.');
  // Theme alter hooks run after module alter hooks, so add this theme
  // suggestion to the beginning of the array so that the suggestion added by
  // the theme_suggestions_test module can be picked up when that module is
  // enabled.
  array_unshift($suggestions, 'theme_test_suggestions__theme_override');
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function test_theme_theme_suggestions_node_alter(array &$suggestions, array $variables): void {
  // Add an invalid suggestion to be tested.
  $suggestions[] = 'invalid_theme_suggestions';
  \Drupal::messenger()->addStatus(__FUNCTION__ . '() executed.');
}

/**
 * Implements hook_theme_registry_alter().
 */
function test_theme_theme_registry_alter(&$registry): void {
  $registry['theme_test_template_test']['variables']['additional'] = 'value';
}

/**
 * Tests a theme overriding a default hook with a suggestion.
 *
 * Implements hook_preprocess_HOOK().
 */
function test_theme_preprocess_theme_test_preprocess_suggestions(&$variables): void {
  $variables['foo'] = 'Theme hook implementor=test_theme_preprocess_theme_test_preprocess_suggestions().';
}

/**
 * Tests a theme overriding a default hook with a suggestion.
 */
function test_theme_preprocess_theme_test_preprocess_suggestions__suggestion(&$variables): void {
  $variables['foo'] = 'Suggestion';
}

/**
 * Tests a theme overriding a default hook with a suggestion.
 */
function test_theme_preprocess_theme_test_preprocess_suggestions__kitten(&$variables): void {
  $variables['foo'] = 'Kitten';
}

/**
 * Tests a theme overriding a default hook with a suggestion.
 */
function test_theme_preprocess_theme_test_preprocess_suggestions__kitten__flamingo(&$variables): void {
  $variables['bar'] = 'Flamingo';
}

/**
 * Tests a preprocess function with suggestions.
 */
function test_theme_preprocess_theme_test_preprocess_suggestions__kitten__meerkat__tarsier__moose(&$variables): void {
  $variables['bar'] = 'Moose';
}

/**
 * Tests that a class can be loaded within a .theme file.
 */
function test_theme_preprocess_theme_test_theme_class(&$variables): void {
  if (class_exists('\Drupal\test_theme\ThemeClass')) {
    $variables['message'] = 'Loading ThemeClass was successful.';
  }
  else {
    $variables['message'] = 'Loading ThemeClass failed.';
  }
}
